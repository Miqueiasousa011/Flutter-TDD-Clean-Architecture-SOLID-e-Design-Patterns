// Mocks generated by Mockito 5.3.2 from annotations
// in fordev/test/presentations/presenters/survey_result/getx_survey_result_presenter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fordev/domain/entities/survey_result_entity.dart' as _i2;
import 'package:fordev/domain/usecases/load_survey_result_usecase.dart' as _i3;
import 'package:fordev/domain/usecases/save_survey_result.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSurveyResultEntity_0 extends _i1.SmartFake
    implements _i2.SurveyResultEntity {
  _FakeSurveyResultEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoadSurveyResultUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadSurveyResultUsecase extends _i1.Mock
    implements _i3.LoadSurveyResultUsecase {
  MockLoadSurveyResultUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SurveyResultEntity> loadBySurvey({String? surveyId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadBySurvey,
          [],
          {#surveyId: surveyId},
        ),
        returnValue:
            _i4.Future<_i2.SurveyResultEntity>.value(_FakeSurveyResultEntity_0(
          this,
          Invocation.method(
            #loadBySurvey,
            [],
            {#surveyId: surveyId},
          ),
        )),
      ) as _i4.Future<_i2.SurveyResultEntity>);
}

/// A class which mocks [SaveSurveyResultUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveSurveyResultUsecase extends _i1.Mock
    implements _i5.SaveSurveyResultUsecase {
  MockSaveSurveyResultUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SurveyResultEntity> save({required String? answer}) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [],
          {#answer: answer},
        ),
        returnValue:
            _i4.Future<_i2.SurveyResultEntity>.value(_FakeSurveyResultEntity_0(
          this,
          Invocation.method(
            #save,
            [],
            {#answer: answer},
          ),
        )),
      ) as _i4.Future<_i2.SurveyResultEntity>);
}
